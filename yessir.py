

import asyncio
import aiohttp
import logging
import html
import re
import json
import os
from copy import deepcopy
from datetime import datetime, timedelta

from aiogram import Bot, Dispatcher, types, F ### <--- –ò–ó–ú–ï–ù–ï–ù–ò–ï: –î–æ–±–∞–≤–ª–µ–Ω –∏–º–ø–æ—Ä—Ç F –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞
from aiogram.client.default import DefaultBotProperties
from aiogram.filters import CommandStart, Command
from aiogram.filters.command import CommandObject
from aiogram.enums import ParseMode, ChatMemberStatus
from aiogram.exceptions import TelegramBadRequest, TelegramRetryAfter
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

# --- –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –ë–û–¢–ê ---
TOKEN = "8055308157:AAFyJoxu8mExTPanr1WtxwgRiGdv_zzNM6A"  # –ó–ê–ú–ï–ù–ò–¢–ï –ù–ê –í–ê–® –¢–û–ö–ï–ù
BOT_DATA_FILE = "bot_data.json"

# --- –ö–û–ù–°–¢–ê–ù–¢–´ –î–õ–Ø PVB ---
PVB_STOCK_API_URL = "https://plantsvsbrainrots.com/api/latest-message"

PVB_SEEDS = [
    "cactusseed", "strawberryseed", "pumkinseed", "sunflowerseed",
    "dragonfruitseed", "eggplantseed", "watermelonseed", "grapeseed",
    "cocotankseed", "carnivorousplantseed", "mrcarrotseed", "tomatrioseed",
    "shroombinoseed", "mangoseed"
]
PVB_GEAR = ["carrotlauncher", "frostblower", "bananagun", "frostgrenade", "waterbucket"]
ALL_ITEMS = PVB_SEEDS + PVB_GEAR # <-- –û–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –¥–ª—è –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏

EMOJI_MAP = {
    "eggplantseed": "üçÜ", "dragonfruitseed": "üêâ", "sunflowerseed": "üåª",
    "pumpkinseed": "üéÉ", "strawberryseed": "üçì", "cactusseed": "üåµ",
    "watermelonseed": "üçâ", "grapeseed": "üçá", "cocotankseed": "ü••",
    "carnivorousplantseed": "ü™¥", "mrcarrotseed": "ü•ï", "tomatrioseed": "üçÖ",
    "shroombinoseed": "üçÑ", "mangoseed": "ü•≠", "carrotlauncher": "ü•ï", "frostblower": "üí®",
    "bananagun": "üçå", "frostgrenade": "‚ùÑÔ∏è", "waterbucket": "üíß",
    "clock": "‚è∞"
}

# --- –ù–ê–°–¢–†–û–ô–ö–ê –õ–û–ì–ì–ò–†–û–í–ê–ù–ò–Ø ---
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - [%(funcName)s] - %(message)s',
    datefmt='%Y-%m-%d %H:%M:%S'
)

# --- –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ë–û–¢–ê –ò –î–ò–°–ü–ï–¢–ßERA ---
bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()

# --- –ì–õ–û–ë–ê–õ–¨–ù–´–ï –ü–ï–†–ï–ú–ï–ù–ù–´–ï ---
bot_data_lock = asyncio.Lock()
last_pvb_stock_data = {"id": None, "notified_users_targets": []}
bot_data = {}
PENDING_EDITS = {}  # üöÄ –°–ª–æ–≤–∞—Ä—å –¥–ª—è –∑–∞–¥–∞—á –∞–Ω—Ç–∏-—Ñ–ª—É–¥–∞

# --- –§–£–ù–ö–¶–ò–ò –°–û–•–†–ê–ù–ï–ù–ò–Ø –ò –ó–ê–ì–†–£–ó–ö–ò –î–ê–ù–ù–´–• ---
def load_data():
    global bot_data
    if os.path.exists(BOT_DATA_FILE):
        try:
            with open(BOT_DATA_FILE, 'r', encoding='utf-8') as f:
                bot_data = json.load(f)
                bot_data['user_configs'] = {int(k): v for k, v in bot_data.get('user_configs', {}).items()}
                for user_id, config in bot_data['user_configs'].items():
                    config['targets'] = {int(k): v for k, v in config.get('targets', {}).items()}
                logging.info(f"Data successfully loaded from {BOT_DATA_FILE}")
        except (json.JSONDecodeError, TypeError) as e:
            logging.error(f"Could not load data from {BOT_DATA_FILE}: {e}. Starting with empty data.")
            bot_data = {"user_configs": {}}
    else:
        logging.info(f"{BOT_DATA_FILE} not found. Starting with empty data.")
        bot_data = {"user_configs": {}}

def save_data():
    asyncio.create_task(save_data_async())

async def save_data_async():
    async with bot_data_lock:
        try:
            with open(BOT_DATA_FILE, 'w', encoding='utf-8') as f:
                data_to_save = deepcopy(bot_data)
                json.dump(data_to_save, f, ensure_ascii=False, indent=4)
                logging.info(f"Data successfully saved to {BOT_DATA_FILE}")
        except Exception as e:
            logging.error(f"Failed to save data: {e}", exc_info=True)

# --- –§–£–ù–ö–¶–ò–Ø –§–û–†–ú–ê–¢–ò–†–û–í–ê–ù–ò–Ø ---
### <--- –ò–ó–ú–ï–ù–ï–ù–ò–ï: –§—É–Ω–∫—Ü–∏—è —Ç–µ–ø–µ—Ä—å –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç `highlight_items` –¥–ª—è –ø–æ–¥—Å–≤–µ—Ç–∫–∏
def format_pvb_description(description: str, highlight_items: set = None) -> str:
    if highlight_items is None:
        highlight_items = set()

    ITEM_ORDER = {
        "cactusseed": 1, "strawberryseed": 2, "pumpkinseed": 3, "sunflowerseed": 4,
        "dragonfruitseed": 5, "eggplantseed": 6, "watermelonseed": 7, "grapeseed": 8,
        "cocotankseed": 9, "carnivorousplantseed": 10, "mrcarrotseed": 11,
        "tomatrioseed": 12, "shroombinoseed": 13, "mangoseed": 14, "waterbucket": 15, "frostgrenade": 16,
        "bananagun": 17, "frostblower": 18, "carrotlauncher": 19
    }
    formatted_lines, raw_lines = [], description.split('\n')
    seeds_items, gear_items, current_section = [], [], None
    
    for line in raw_lines:
        cleaned_line = line.replace('**', '')
        if match := re.search(r'<t:(\d+):R>', cleaned_line):
            change_time = datetime.fromtimestamp(int(match.group(1))).strftime('%H:%M:%S')
            cleaned_line = cleaned_line.replace(match.group(0), f"{change_time} –ø–æ –ú–°–ö")
        
        if cleaned_line.strip().lower() == "seeds":
            current_section = "seeds"
            continue
        if cleaned_line.strip().lower() == "gear":
            current_section = "gear"
            continue

        if match := re.search(r'<:(\w+):\d+>\s*(.*)', cleaned_line):
            item_name, rest_of_line = match.group(1), match.group(2)
            emoji = EMOJI_MAP.get(item_name, '‚ñ´Ô∏è')
            item_line = f"{emoji} {rest_of_line}"
            
            ### <--- –ò–ó–ú–ï–ù–ï–ù–ò–ï: –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–≥–∏ <b>, –µ—Å–ª–∏ –ø—Ä–µ–¥–º–µ—Ç –Ω—É–∂–Ω–æ –ø–æ–¥—Å–≤–µ—Ç–∏—Ç—å
            if item_name in highlight_items:
                item_line = f"<b>{item_line}</b>"

            if current_section == "seeds" and item_name in PVB_SEEDS:
                seeds_items.append((ITEM_ORDER.get(item_name, 99), item_line))
            elif current_section == "gear" and item_name in PVB_GEAR:
                gear_items.append((ITEM_ORDER.get(item_name, 99), item_line))
        else:
            formatted_lines.append(cleaned_line)

    seeds_items.sort(key=lambda x: x[0])
    gear_items.sort(key=lambda x: x[0])
    
    formatted_lines.append("<b>üëæSeeds stock:\n</b>")
    formatted_lines.extend(item[1] for item in seeds_items)
    formatted_lines.append("<b>\nü™èGear stock:\n</b>")
    formatted_lines.extend(item[1] for item in gear_items)
    return "\n".join(formatted_lines).strip()

# --- –§–£–ù–ö–¶–ò–ò –ì–ï–ù–ï–†–ê–¶–ò–ò –ö–õ–ê–í–ò–ê–¢–£–† ---
def get_user_config(user_id: int) -> dict:
    user_configs = bot_data.setdefault("user_configs", {})
    return user_configs.setdefault(user_id, {"channels": [], "targets": {}})

def get_target_config(user_id: int, target_chat_id: int) -> dict:
    user_config = get_user_config(user_id)
    targets = user_config.setdefault("targets", {})
    return targets.setdefault(target_chat_id, {"is_active": False, "tracked_items": []})

def generate_autostock_main_markup(user_id: int) -> InlineKeyboardMarkup:
    buttons = []
    user_config = get_user_config(user_id)
    ls_target_config = get_target_config(user_id, user_id)
    ls_mark = "‚úÖ" if ls_target_config.get("is_active", False) else "‚ùå"
    buttons.append([InlineKeyboardButton(text=f"{ls_mark} –õ–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è", callback_data=f"as_sel:{user_id}:{user_id}")])
    for channel in user_config.get("channels", []):
        channel_target_config = get_target_config(user_id, channel['id'])
        channel_mark = "‚úÖ" if channel_target_config.get("is_active", False) else "‚ùå"
        buttons.append([InlineKeyboardButton(text=f"{channel_mark} {html.escape(channel['name'])}", callback_data=f"as_sel:{channel['id']}:{user_id}")])
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def generate_autostock_target_menu_markup(user_id: int, target_chat_id: int) -> InlineKeyboardMarkup:
    target_config = get_target_config(user_id, target_chat_id)
    is_enabled = target_config.get("is_active", False)
    toggle_text = "‚ùå –û—Ç–∫–ª—é—á–∏—Ç—å" if is_enabled else "‚úÖ –í–∫–ª—é—á–∏—Ç—å"
    buttons = [
        [InlineKeyboardButton(text=toggle_text, callback_data=f"as_tog_t:{target_chat_id}:{user_id}")],
        [InlineKeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç—ã", callback_data=f"as_items:{target_chat_id}:{user_id}")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"as_main:{user_id}")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def generate_autostock_items_markup(user_id: int, target_chat_id: int) -> InlineKeyboardMarkup:
    target_config = get_target_config(user_id, target_chat_id)
    tracked_items = target_config.get("tracked_items", [])
    buttons, row = [], []
    for idx, item in enumerate(ALL_ITEMS):
        mark = "‚úÖ" if item in tracked_items else "‚ùå"
        display_name = item.replace('seed', '')
        row.append(InlineKeyboardButton(text=f"{mark} {display_name}", callback_data=f"as_ti:{idx}:{target_chat_id}:{user_id}"))
        if len(row) == 2:
            buttons.append(row)
            row = []
    if row: buttons.append(row)
    buttons.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"as_sel:{target_chat_id}:{user_id}")])
    return InlineKeyboardMarkup(inline_keyboard=buttons)

# --- –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–û–ú–ê–ù–î ---
@dp.message(CommandStart())
async def start_handler(message: types.Message):
    await message.answer(
        "üëã <b>–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å—Ç–æ–∫–∞ Plants vs Brainrots.</b>\n\n"
        "<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n"
        "  /stock - –ü–æ–∫–∞–∑–∞—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —Å—Ç–æ–∫.\n"
        "  /autostock - –ù–∞—Å—Ç—Ä–æ–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.\n"
        "  /add <code>@–∫–∞–Ω–∞–ª</code> - –î–æ–±–∞–≤–∏—Ç—å –≤–∞—à –∫–∞–Ω–∞–ª/—á–∞—Ç."
    )

### <--- –ò–ó–ú–ï–ù–ï–ù–ò–ï: –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–ø–µ—Ä—å —Ä–µ–∞–≥–∏—Ä—É–µ—Ç –Ω–∞ –∫–æ–º–∞–Ω–¥—É /stock –ò –Ω–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
@dp.message(Command('stock'))
@dp.message(F.text.lower().in_([
    '—á—Ç–æ –≤ —Å—Ç–æ–∫–µ', '—á—Ç–æ –≤ —Å—Ç–æ–∫–µ?', '—á—Ç–æ —Å–µ–π—á–∞—Å –≤ —Å—Ç–æ–∫–µ?', '—Å—Ç–æ–∫',
    '–∫–∞–∫–æ–π —Å—Ç–æ–∫', '—Å—Ç–æ–∫?', '–∫–∞–∫–æ–π —Å—Ç–æ–∫?'
]))
async def stock_handler(message: types.Message):
    msg = await message.reply("üîÑ –ó–∞–ø—Ä–∞—à–∏–≤–∞—é —Å—Ç–æ–∫...")
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(PVB_STOCK_API_URL, timeout=10) as response:
                response.raise_for_status()
                data = await response.json()
        if not data or not isinstance(data, list):
            return await msg.edit_text("‚ùå <b>–û—à–∏–±–∫–∞ API:</b> –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö.")
        description = data[0].get("embeds", [{}])[0].get("description", "–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        # –í—ã–∑—ã–≤–∞–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–µ–∑ –ø–æ–¥—Å–≤–µ—Ç–∫–∏, —Ç–∞–∫ –∫–∞–∫ —ç—Ç–æ –ø—Ä–æ—Å—Ç–æ –∑–∞–ø—Ä–æ—Å —Å—Ç–æ–∫–∞
        await msg.edit_text(f"üì¶ <b>–ê–∫—Ç—É–∞–ª—å–Ω—ã–π —Å—Ç–æ–∫ PvB:</b>\n\n{format_pvb_description(description)}\n\n<b>–ó–∞—Ö–æ–¥–∏ –≤ –æ—Ñ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –∫–∞–Ω–∞–ª –±–æ—Ç–∞ —á—Ç–æ–±—ã –Ω–µ –ø—Ä–æ–ø—É—Å–∫–∞—Ç—å —Ö–æ—Ä–æ—à–∏–µ —Å—Ç–æ–∫–∏:</b>\n@PvBautostock")
    except Exception as e:
        logging.error(f"Error in stock_handler: {e}", exc_info=True)
        await msg.edit_text("‚ùå <b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞</b> –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–æ–∫–∞.")

@dp.message(Command('autostock'))
async def autostock_handler(message: types.Message):
    await message.answer(
        "üîî <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª –∏–ª–∏ –õ–° –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.",
        reply_markup=generate_autostock_main_markup(message.from_user.id)
    )

@dp.message(Command('add'))
async def add_channel_handler(message: types.Message, command: CommandObject):
    user_id = message.from_user.id
    if not command.args:
        return await message.answer("‚ùå <b>–û—à–∏–±–∫–∞:</b> –£–∫–∞–∂–∏—Ç–µ —é–∑–µ—Ä–Ω–µ–π–º –∫–∞–Ω–∞–ª–∞/—á–∞—Ç–∞.\n<i>–ü—Ä–∏–º–µ—Ä: /add @mychannel</i>")

    chat_username = command.args
    msg = await message.answer(f"üîÑ –ü—Ä–æ–≤–µ—Ä—è—é –ø—Ä–∞–≤–∞ –¥–ª—è <code>{html.escape(chat_username)}</code>...")
    try:
        target_chat = await bot.get_chat(chat_username)
        bot_member = await bot.get_chat_member(chat_id=target_chat.id, user_id=bot.id)
        if bot_member.status != ChatMemberStatus.ADMINISTRATOR:
            return await msg.edit_text(f"‚ùå <b>–û—à–∏–±–∫–∞:</b> –Ø –Ω–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –≤ ¬´{html.escape(target_chat.title)}¬ª.")
        user_member = await bot.get_chat_member(chat_id=target_chat.id, user_id=user_id)
        if user_member.status not in [ChatMemberStatus.ADMINISTRATOR, ChatMemberStatus.CREATOR]:
            return await msg.edit_text(f"‚ùå <b>–û—à–∏–±–∫–∞:</b> –í—ã –Ω–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –≤ ¬´{html.escape(target_chat.title)}¬ª.")
        
        async with bot_data_lock:
            user_config = get_user_config(user_id)
            if any(c['id'] == target_chat.id for c in user_config["channels"]):
                return await msg.edit_text("‚úÖ –≠—Ç–æ—Ç —á–∞—Ç —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω.")
            user_config["channels"].append({"id": target_chat.id, "name": target_chat.title})
        save_data()
        await msg.edit_text(f"‚úÖ <b>–£—Å–ø–µ—à–Ω–æ!</b> –ß–∞—Ç ¬´{html.escape(target_chat.title)}¬ª –¥–æ–±–∞–≤–ª–µ–Ω.")
    except TelegramBadRequest:
        await msg.edit_text("‚ùå <b>–û—à–∏–±–∫–∞:</b> –ß–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —è –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –Ω–µ–≥–æ.")
    except Exception as e:
        logging.error(f"Error in add_channel_handler: {e}", exc_info=True)
        await msg.edit_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞.")

# --- –§–û–ù–û–í–ê–Ø –ó–ê–î–ê–ß–ê ---
async def autostock_monitor():
    global last_pvb_stock_data
    while True:
        try:
            now = datetime.now()
            sleep_duration = (5 - (now.minute % 5)) * 60 - now.second + 3
            logging.info(f"Next check in {sleep_duration:.0f}s.")
            await asyncio.sleep(sleep_duration)

            logging.info("Waiting 20s for API update...")
            await asyncio.sleep(20)

            logging.info("Starting autostock check...")
            async with aiohttp.ClientSession() as s:
                async with s.get(PVB_STOCK_API_URL, timeout=10) as r:
                    if r.status != 200: continue
                    data = await r.json()
            if not isinstance(data, list) or not data: continue

            latest_message = data[0]
            current_id = latest_message.get("id")

            if current_id != last_pvb_stock_data["id"]:
                logging.info(f"New PvB stock detected! ID: {current_id}.")
                last_pvb_stock_data = {"id": current_id, "notified_users_targets": []}

            description = latest_message.get("embeds", [{}])[0].get("description", "")
            current_stock_items = set(re.findall(r'<:(\w+):\d+>', description))
            if not current_stock_items: continue

            async with bot_data_lock:
                configs_copy = deepcopy(bot_data.get("user_configs", {}))

            for user_id, config in configs_copy.items():
                for target_chat_id, target_config in config.get("targets", {}).items():
                    if not target_config.get("is_active", False): continue
                    if (user_id, target_chat_id) in last_pvb_stock_data["notified_users_targets"]: continue

                    matches = set(target_config.get("tracked_items", [])).intersection(current_stock_items)
                    if matches:
                        logging.info(f"Matches for user {user_id} in target {target_chat_id}: {matches}")
                        ### <--- –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ü–µ—Ä–µ–¥–∞–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è `matches` –≤ —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –ø–æ–¥—Å–≤–µ—Ç–∫–∏
                        formatted_text = format_pvb_description(description, highlight_items=matches)
                        try:
                            await bot.send_message(
                                chat_id=target_chat_id, 
                                text=f"üîî <b>Auto Stock:</b>\n–ü–æ—è–≤–∏–ª–∏—Å—å –Ω—É–∂–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã!\n\n{formatted_text}"
                            )
                            last_pvb_stock_data["notified_users_targets"].append((user_id, target_chat_id))
                            await asyncio.sleep(0.1)
                        except Exception as e:
                            logging.error(f"Failed to send notification to {target_chat_id}: {e}")
        except Exception as e:
            logging.error(f"Critical error in autostock_monitor: {e}", exc_info=True)
            await asyncio.sleep(60)

# --- –°–ò–°–¢–ï–ú–ê –ê–ù–¢–ò-–§–õ–£–î–ê ---
async def _execute_markup_update(user_id: int, chat_id: int, message_id: int, target_chat_id: int):
    await asyncio.sleep(1.2)
    key = (chat_id, message_id)
    try:
        logging.info(f"Executing delayed update for msg {message_id}")
        markup = generate_autostock_items_markup(user_id, target_chat_id)
        await bot.edit_message_reply_markup(chat_id=chat_id, message_id=message_id, reply_markup=markup)
    except TelegramRetryAfter as e:
        logging.warning(f"Flood error, retrying after {e.retry_after}s")
        await asyncio.sleep(e.retry_after)
        await _execute_markup_update(user_id, chat_id, message_id, target_chat_id)
    except TelegramBadRequest as e:
        if "message is not modified" not in e.message:
            logging.error(f"Failed to edit msg {message_id}: {e}")
    finally:
        PENDING_EDITS.pop(key, None)

async def schedule_markup_update(call: types.CallbackQuery, target_chat_id: int):
    key = (call.message.chat.id, call.message.message_id)
    if key in PENDING_EDITS:
        PENDING_EDITS[key].cancel()
    PENDING_EDITS[key] = asyncio.create_task(
        _execute_markup_update(call.from_user.id, call.message.chat.id, call.message.message_id, target_chat_id)
    )

# --- –û–ë–†–ê–ë–û–¢–ß–ò–ö CALLBACK ---
@dp.callback_query()
async def callback_query_handler(call: types.CallbackQuery):
    user_id = call.from_user.id
    try:
        parts = call.data.split(":")
        action = parts[0]
        owner_id = int(parts[-1])
        if user_id != owner_id:
            return await call.answer("‚ùå –≠—Ç–æ –∫–Ω–æ–ø–∫–∏ –Ω–µ –¥–ª—è –≤–∞—Å!", show_alert=True)
        
        if action == "as_sel":
            target_chat_id = int(parts[1])
            user_config = get_user_config(user_id)
            target_chat_name = "–õ–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è"
            if target_chat_id != user_id:
                target_chat_name = next((c['name'] for c in user_config.get("channels", []) if c['id'] == target_chat_id), "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —á–∞—Ç")
            await call.message.edit_text(
                f"üîß <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è:</b>\n<i>{html.escape(target_chat_name)}</i>", 
                reply_markup=generate_autostock_target_menu_markup(user_id, target_chat_id)
            )
        
        elif action == "as_tog_t":
            target_chat_id = int(parts[1])
            async with bot_data_lock:
                target_config = get_target_config(user_id, target_chat_id)
                target_config["is_active"] = not target_config.get("is_active", False)
                is_active_now = target_config["is_active"]
            save_data()
            await call.answer(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è {'–≤–∫–ª—é—á–µ–Ω—ã' if is_active_now else '–æ—Ç–∫–ª—é—á–µ–Ω—ã'}.")
            await call.message.edit_reply_markup(reply_markup=generate_autostock_target_menu_markup(user_id, target_chat_id))
        
        elif action == "as_items":
            target_chat_id = int(parts[1])
            await call.message.edit_text(
                "üìù <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–µ –≤–∞–º –ø—Ä–µ–¥–º–µ—Ç—ã.",
                reply_markup=generate_autostock_items_markup(user_id, target_chat_id)
            )

        elif action == "as_ti":
            item_index, target_chat_id = int(parts[1]), int(parts[2])
            item_name = ALL_ITEMS[item_index]
            async with bot_data_lock:
                target_config = get_target_config(user_id, target_chat_id)
                tracked_items = target_config.get("tracked_items", [])
                if item_name in tracked_items:
                    tracked_items.remove(item_name)
                    await call.answer(f"{item_name.replace('seed','')} –æ—Ç–∫–ª—é—á–µ–Ω.")
                else:
                    tracked_items.append(item_name)
                    await call.answer(f"{item_name.replace('seed','')} –≤–∫–ª—é—á–µ–Ω.")
                target_config["tracked_items"] = tracked_items
            save_data()
            await schedule_markup_update(call, target_chat_id)
        
        elif action == "as_main":
            await call.message.edit_text(
                "üîî <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª –∏–ª–∏ –õ–° –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.",
                reply_markup=generate_autostock_main_markup(user_id)
            )
        
    except Exception as e:
        logging.error(f"Error in callback handler: {e}", exc_info=True)
        await call.answer("–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫...", show_alert=True)

# --- –¢–û–ß–ö–ê –í–•–û–î–ê ---
async def main():
    load_data()
    autostock_task = asyncio.create_task(autostock_monitor())
    logging.info("Starting bot polling...")
    try:
        await dp.start_polling(bot, skip_updates=True)
    finally:
        logging.info("Shutting down...")
        await save_data_async()
        autostock_task.cancel()
        try:
            await autostock_task
        except asyncio.CancelledError:
            logging.info("Autostock monitor task cancelled.")

if __name__ == '__main__':
    try:
        asyncio.run(main())
    except (KeyboardInterrupt, SystemExit):
        logging.info("Bot stopped.")
    except Exception as e:
        logging.critical(f"Bot crashed: {e}", exc_info=True)